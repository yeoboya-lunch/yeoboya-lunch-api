services:
  mysql:
    image: mysql:8.0  # MySQL 8.0 이미지 사용
    container_name: mysql_container  # 컨테이너 이름 지정
    restart: always  # 컨테이너가 중지되면 항상 재시작
    env_file:
      - .env
    ports:
      - "3306:3306"  # 로컬 머신(호스트)와 컨테이너의 MySQL 포트 매핑
    volumes:
      - mysql_data:/var/lib/mysql  # MySQL 데이터를 영구 저장하는 볼륨
      - ./mysql-init:/docker-entrypoint-initdb.d  # SQL 초기화 파일 자동 실행
    networks:
      - app_network  # 서비스 간 통신을 위한 네트워크 설정
    healthcheck:  # MySQL 서비스 상태 체크 설정
      test: ["CMD", "mysqladmin", "ping", "-h", "mysql", "-u$MYSQL_USER", "-p$MYSQL_PASSWORD"]  # 상태 확인 명령어
      interval: 10s  # 10초마다 상태 체크
      retries: 5  # 최대 5번 재시도
      timeout: 5s  # 타임아웃 5초
    deploy:
      resources:
        limits:
          cpus: "2.0"   # 최대 2개 vCPU 사용
          memory: "8GB"  # 최대 8GB RAM 사용

  redis:
    image: redis:latest  # Redis 최신 버전 이미지 사용
    container_name: redis_container  # 컨테이너 이름 지정
    restart: always  # 컨테이너가 중지되면 항상 재시작
    env_file:
      - .env  # .env 파일에서 환경 변수 로드
    ports:
      - "6379:6379"  # 로컬 머신과 컨테이너의 Redis 포트 매핑
    volumes:
      - redis_data:/data  # Redis 데이터를 영구 저장하는 볼륨
    networks:
      - app_network  # 같은 네트워크에서 다른 컨테이너들과 통신 가능
    command: ["redis-server", "--bind", "0.0.0.0", "--requirepass", "$REDIS_PASSWORD"]  # 외부 접속 허용 + 비밀번호 설정
    healthcheck:  # Redis 서비스 상태 체크 설정
      test: ["CMD", "redis-cli", "ping"]  # 상태 확인 명령어 (PONG 응답 확인)
      interval: 10s  # 10초마다 상태 체크
      retries: 5  # 최대 5번 재시도
      timeout: 5s  # 타임아웃 5초
    deploy:
      resources:
        limits:
          cpus: "1.0"   # 최대 1개 vCPU 사용
          memory: "2GB"  # 최대 2GB RAM 사용

  app:
    build:   # 현재 디렉토리에 있는 Dockerfile을 사용해 빌드
      context: .
      args:
        TEST_ENABLED: "$TEST_ENABLED"  # 테스트 실행 여부
        DOCS_ENABLED: "$DOCS_ENABLED"  # REST Docs 생성 여부
    image: yeoboya-lunch-api:0.0.1  # 원하는 이미지 이름 설정
    container_name: spring_boot_container  # 컨테이너 이름 지정
    restart: unless-stopped  # 컨테이너가 중지되면 자동 재시작 (수동으로 중지하면 재시작 안 함)
    env_file:
      - .env  # .env 파일에서 환경 변수 로드
    depends_on:  # 의존하는 서비스 설정 (MySQL과 Redis가 정상 실행된 후 시작)
      mysql:
        condition: service_healthy  # MySQL이 정상적으로 실행된 후에 앱 실행
      redis:
        condition: service_healthy  # Redis가 정상적으로 실행된 후에 앱 실행
    ports:
      - "8080:8080"  # 로컬 머신과 컨테이너의 애플리케이션 포트 매핑
    networks:
      - app_network  # MySQL, Redis와 같은 네트워크에서 통신 가능
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: "4GB"

networks:
  app_network:  # 모든 서비스가 사용하는 네트워크 정의

volumes:
  mysql_data:  # MySQL 데이터 저장 볼륨 (컨테이너 삭제 시 데이터 유지)
  redis_data:  # Redis 데이터 저장 볼륨 (컨테이너 삭제 시 데이터 유지)
